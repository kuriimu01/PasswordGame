package org.passwordgame;


import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;


public class MainFrame extends JFrame {

    Validator v = new Validator();

    JLabel l1;
    JLabel l2;
    JTextField tf;
    JPasswordField pf;
    JButton b1;
    JCheckBox cb;
    boolean correctUsername = false;
    boolean correctPassword = false;

    public MainFrame() {
        super("The Password Game");
        setSize(600, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        ImageIcon icon = new ImageIcon("./icon/icon.png");
        setIconImage(icon.getImage());

        l1 = new JLabel("–ü–∞—Ä–æ–ª—å", SwingConstants.CENTER);
        l2 = new JLabel("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", SwingConstants.CENTER);
        tf = new JTextField();
        pf = new JPasswordField();
        b1 = new JButton("–î–∞–ª—ñüí´");
        cb = new JCheckBox("–ü—Ä–∏—Ö–æ–≤–∞—Ç–∏");

        Handler h = new Handler();
        pf.setPreferredSize(new Dimension(600, 45));
        pf.setEchoChar((char) 0);

        tf.getDocument().addDocumentListener(h);
        tf.addActionListener(h);
        pf.getDocument().addDocumentListener(h);
        pf.addActionListener(h);
        b1.addActionListener(h);
        cb.addItemListener(h);

        setLayout(new GridLayout(6, 1));
        add(l2);
        add(tf);
        add(l1);
        add(pf);
        add(cb);

    }

    class Handler implements ActionListener, DocumentListener, ItemListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == b1) {
                SwingUtilities.invokeLater(CatFrame::new);
                dispose();
            }
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            checkFields(e);
            winCheck();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            checkFields(e);
            winCheck();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            checkFields(e);
            winCheck();
        }

        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getSource() == cb) {
                if (cb.isSelected()) {
                    pf.setEchoChar('*');
                } else {
                    pf.setEchoChar((char) 0);
                }
            }
        }

        private void checkFields(DocumentEvent e) {
            if (e.getDocument() == tf.getDocument()) {
                checkUsername();
            } else if (e.getDocument() == pf.getDocument()) {
                checkPassword();
            }
        }

        private void checkUsername() {
            String username = tf.getText();

            if (username.length() < 3) {
                l2.setText("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª–∏.");
                correctUsername = false;
            } else if (username.length() > 20) {
                l2.setText("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 20 —Å–∏–º–≤–æ–ª—ñ–≤.");
                correctUsername = false;
            } else if (v.hasSpaces(username)) {
                l2.setText("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏.");
                correctUsername = false;
            } else if (!v.isValidUsername(username)) {
                l2.setText("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏, '_', '-'.");
                correctUsername = false;
            } else {
                l2.setText("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–µ!");
                correctUsername = true;
            }
        }


        private void checkPassword() {
            String password = new String(pf.getPassword());

            if (!v.hasLowerCase(password)) {
                l1.setText("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –º–∞–ª—É –ª—ñ—Ç–µ—Ä—É.");
                correctPassword = false;
            } else if (password.length() < 8) {
                l1.setText("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤.");
                correctPassword = false;
            } else if (!v.hasNumber(password)) {
                l1.setText("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.");
                correctPassword = false;
            } else if (!v.hasUpperCase(password)) {
                l1.setText("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –≤–µ–ª–∏–∫—É –ª—ñ—Ç–µ—Ä—É.");
                correctPassword = false;
            } else if (!v.hasSpecialCharacter(password)) {
                l1.setText("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª.");
                correctPassword = false;
            } else {
                correctPassword = true;
            }
        }

        private void winCheck() {
            if (correctUsername && correctPassword) {
                l2.setText("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ñ! –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—å –∫–∞—Ä—Ç–∏–Ω–∫–æ—é –∫–æ—Ç–∞!");
                l1.setText("");
                add(b1);
                setLayout(new GridLayout(7, 1));
                setVisible(true);
            }
        }
    }
}


